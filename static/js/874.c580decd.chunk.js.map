{"version":3,"file":"static/js/874.c580decd.chunk.js","mappings":"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","sources":["components/BackToTopBtn/index.jsx","components/Footer/index.jsx","components/Layout/index.jsx","components/PageTitle/index.jsx","components/Description/index.js","components/Burn/Hero.jsx","components/SectionTitle/index.jsx","components/Burn/LOHBurningCard.jsx","components/Burn/Combobox.js","components/LOHModal/index.jsx","components/Burn/BurnConfirmModal.jsx","components/Burn/BurningLOHModal.jsx","components/Burn/LOHBurning.jsx","lib/approveNFT.tsx","components/Burn/BurningContainer.jsx","pages/Burn/index.jsx"],"sourcesContent":["import cx from \"classnames\";\r\nimport { IoMdArrowUp } from \"react-icons/io\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst BackToTopBtn = () => {\r\n  const backToTop = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  // ------------------------------------------------\r\n\r\n  return (\r\n    <button className={cx(\"back-to-top-btn\")} onClick={backToTop}>\r\n      <IoMdArrowUp /> back to top\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BackToTopBtn;\r\n","import { Link } from \"react-router-dom\";\r\nimport cx from \"classnames\";\r\nimport BackToTopBtn from \"../BackToTopBtn\";\r\n\r\nimport NineTailsLogoImg from \"assets/images/footer/NinetailsLogo.png\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={cx(\"footer\")}>\r\n      <p className={cx(\"slogan\")}>\r\n        we are <span>inevitable!</span>\r\n      </p>\r\n      <div className={cx(\"links\")}>\r\n        <div className={cx(\"copyright\")}>\r\n          &copy; 2023 by nine tails ink{\" \"}\r\n          <img src={NineTailsLogoImg} alt=\"nine-tails-ink\" />\r\n        </div>\r\n        <div className={cx(\"mail-container\")}>\r\n          <Link to=\"/\">hello@lifeofhel.xyz</Link>\r\n        </div>\r\n        <div className={cx(\"back-to-top-container\")}>\r\n          <BackToTopBtn />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import Footer from \"../Footer\";\r\nimport Header from \"../Header/Header\";\r\nimport HorizontalDivider from \"../HorizontalDivider\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <>\r\n      {/* <Header /> */}\r\n      <main>{children}</main>\r\n      <HorizontalDivider />\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst PageTitle = ({ children, classes }) => {\r\n  return <h1 className={cx(\"page-title\", classes)}>{children}</h1>;\r\n};\r\n\r\nexport default PageTitle;\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Description = ({ children, classes }) => {\r\n  return <p className={cx(\"description\", classes)}>{children}</p>;\r\n};\r\n\r\nexport default Description;\r\n","import cx from \"classnames\";\r\nimport Description from \"../Description\";\r\nimport PageTitle from \"../PageTitle\";\r\nimport RoundButton from \"../RoundButton\";\r\n\r\nimport Male from \"assets/images/burning/Male.png\";\r\nimport Female from \"assets/images/burning/Female.png\";\r\n\r\nconst Hero = (props) => {\r\n  const { connectWallet, burningStatus, endTime } = props;\r\n\r\n  let days = 0;\r\n  let hours = 0;\r\n  let minutes = 0;\r\n  const currentTime = new Date().getTime() / 1000;\r\n\r\n  if (burningStatus === 1) {\r\n    const timeToEnd = endTime - currentTime;\r\n    days = Math.floor(timeToEnd / (60 * 60 * 24));\r\n    hours = Math.floor((timeToEnd % (60 * 60 * 24)) / (60 * 60));\r\n    minutes = Math.floor((timeToEnd % (60 * 60)) / 60);\r\n  }\r\n\r\n  return (\r\n    <div className={cx(\"burning-hero\")}>\r\n      <div className={cx(\"hero-img-container\")}>\r\n        <img src={Male} alt=\"Male.png\" width=\"100%\" />\r\n      </div>\r\n      <div className={cx(\"page-intro\")}>\r\n        <PageTitle>\r\n          loh <span>burn</span>\r\n        </PageTitle>\r\n        <Description>\r\n          Ready to join the Humans ranks?\r\n          <br />\r\n          Burn your LOH NFTs and secure your spot\r\n        </Description>\r\n        {\r\n          burningStatus === 1 ?\r\n            <>\r\n              <Description classes=\"remaining-time\">\r\n                {days}D {hours}H {minutes}M\r\n                <br />\r\n                <Description classes=\"remaining-time-sub\">\r\n                  Left to the end of the burn\r\n                </Description>\r\n              </Description>\r\n            </>\r\n            :\r\n            <>\r\n              <Description classes=\"remaining-time\">\r\n                CLOSED\r\n                <br />\r\n              </Description>\r\n            </>\r\n        }\r\n\r\n        <RoundButton\r\n          variant=\"danger\"\r\n          text=\"connect wallet\"\r\n          onBtnClick={connectWallet}\r\n        />\r\n      </div>\r\n      <div className={cx(\"hero-img-container\")}>\r\n        <img src={Female} alt=\"Male.png\" width=\"100%\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst SectionTitle = ({ children, classes }) => {\r\n  return <h2 className={cx(\"section-title\", classes)}>{children}</h2>;\r\n};\r\n\r\nexport default SectionTitle;\r\n","import cx from \"classnames\";\r\n\r\nconst LOHBurningCard = ({\r\n  nft,\r\n  timeTypeInfo,\r\n  currentTimeType,\r\n  index,\r\n  selectStatusInWallet,\r\n  handleSelectNFTInWallet,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"loh-burning-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          burning period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {timeTypeInfo[currentTimeType].period} day\r\n          </span>{\" \"}\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          estimated reward:\r\n          <br />{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.rewards} loh tickets\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div className=\"loh-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`lohCheckbox-${index}`}\r\n          checked={selectStatusInWallet[index] === true}\r\n          onChange={() => handleSelectNFTInWallet(index)}\r\n          value={selectStatusInWallet[index]}\r\n        />\r\n        <label htmlFor={`lohCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LOHBurningCard;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst customStyles = {\r\n  container: (provided) => ({\r\n    ...provided,\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    fontFamily: \"mont\",\r\n    borderRadius: \"25px\",\r\n  }),\r\n  control: (provided) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    borderRadius: \"25px\",\r\n    padding: \"0.5rem\",\r\n    border: \"none\",\r\n  }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    borderRadius: \"10px\",\r\n    backgroundColor: state.isFocused ? \"#222222\" : \"#111111\",\r\n    fontFamily: \"mont\",\r\n  }),\r\n  singleValue: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n  noOptionsMessage: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n  }),\r\n  menu: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 1.8px rgba(214, 214, 214, 0.12)\",\r\n  }),\r\n  input: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n};\r\n\r\nconst Combobox = ({ options, value, onChange }) => (\r\n  <Select\r\n    options={options}\r\n    styles={customStyles}\r\n    value={value}\r\n    onChange={onChange}\r\n  />\r\n);\r\n\r\nexport default Combobox;\r\n","import \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport \"./index.scss\";\r\nimport XImage from \"assets/images/common/X.png\";\r\n\r\n// ================================================\r\n\r\nconst LOHModal = ({\r\n  children,\r\n  open,\r\n  setOpen,\r\n  onOpenModal,\r\n  onCloseModal,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      onClose={onCloseModal}\r\n      center\r\n      classNames={{ modal: `loh-modal ${classes}` }}\r\n    >\r\n      <button onClick={onCloseModal} className=\"shut-btn\">\r\n        <img src={XImage} alt=\"X.png\" />\r\n      </button>\r\n      {children}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default LOHModal;\r\n","import cx from \"classnames\";\r\nimport LOHModal from \"../LOHModal\";\r\nimport RoundButton from \"../RoundButton\";\r\nimport { LOH_RAFFLES } from \"config/raffles\"\r\nimport AvatarKYORotate from \"assets/images/common/KYORotate.gif\";\r\nimport DangerKeepOutImage from \"assets/images/earn/DangerKeepOut.png\";\r\n\r\n\r\n// ================================================\r\n\r\nconst BurnConfirmModal = ({\r\n  openModal,\r\n  setOpenModal,\r\n  onCloseModal,\r\n  pointAmount,\r\n  onConfirmBtn,\r\n  isMobile,\r\n}) => {\r\n  return (\r\n    <LOHModal\r\n      open={openModal}\r\n      setOpen={setOpenModal}\r\n      onCloseModal={onCloseModal}\r\n      classes=\"burn-confirm-modal\"\r\n    >\r\n      <h4 className=\"title text-center uppercase mb-3\">\r\n        you will be receiving<br />\r\n        {pointAmount}<br />\r\n        LOH points\r\n      </h4>\r\n      <p className=\"desc text-center mb-5 uppercase italic\">\r\n        Press the below button to<br />\r\n        initate the burn!\r\n      </p>\r\n      <div className=\"text-center mb-6\">\r\n        <RoundButton\r\n          variant=\"danger\"\r\n          text=\"confirm\"\r\n          onBtnClick={onConfirmBtn}\r\n        />\r\n      </div>\r\n    </LOHModal>\r\n  );\r\n};\r\n\r\nexport default BurnConfirmModal;\r\n","import LOHModal from \"../LOHModal\";\r\nimport AvatarKYORotate from \"assets/images/common/KYORotate.gif\";\r\nimport DangerKeepOutImage from \"assets/images/earn/DangerKeepOut.png\";\r\n\r\n// ================================================\r\n\r\nconst BurningLOHModal = ({ openModal, setOpenModal, onCloseModal }) => {\r\n  return (\r\n    <LOHModal\r\n      open={openModal}\r\n      setOpen={setOpenModal}\r\n      onCloseModal={onCloseModal}\r\n      classes=\"burning-loh-modal\"\r\n    >\r\n      <div className=\"text-center mb-3\">\r\n        <img src={AvatarKYORotate} alt=\"avatar.png\" width={120} />\r\n      </div>\r\n      <h4 className=\"title text-center uppercase mb-3\">\r\n        burning is in progress\r\n      </h4>\r\n      <p className=\"desc text-center mb-5 uppercase italic\">\r\n        your tribute is being processed...\r\n      </p>\r\n      <div className=\"text-center mb-1 danger-keep-out-container\">\r\n        <img src={DangerKeepOutImage} alt=\"DangerKeepOut.png\" width=\"60px\" />\r\n      </div>\r\n      <p className=\"status text-center uppercase italic\">\r\n        waiting for wallet transaction <br /> confirmation\r\n      </p>\r\n    </LOHModal>\r\n  );\r\n};\r\n\r\nexport default BurningLOHModal;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\nimport cx from \"classnames\";\r\nimport useSWR from \"swr\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nimport SectionTitle from \"../SectionTitle\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport TableDecoImg from \"assets/images/staking/tableDeco.png\";\r\nimport CircularArrowImg from \"assets/images/common/Arrow.png\";\r\nimport XImage from \"assets/images/common/XLight.png\";\r\nimport RoundButton from \"../RoundButton\";\r\nimport { getContract } from \"config/contracts\";\r\nimport { LOH_NFTS, REWARD_AMOUNTS, VOLUME1_METADATA, COLLECTION_OPTIONS } from \"config/staking\";\r\nimport { callContract, contractFetcher } from \"lib/contracts\";\r\nimport { useChainId } from \"lib/chains\";\r\nimport { approveNFT } from \"lib/approveNFT\";\r\nimport BurningLOH from \"abis/BurningLOH.json\";\r\nimport LOHBurningCard from \"./LOHBurningCard\";\r\nimport Combobox from './Combobox';\r\nimport Description from \"components/Description\";\r\nimport BurnConfirmModal from \"components/Burn/BurnConfirmModal\";\r\nimport BurningLOHModal from \"components/Burn/BurningLOHModal\";\r\n\r\nconst timeTypeInfo = [\r\n  {\r\n    label: \"7-day\",\r\n    id: \"seven\",\r\n    period: 7,\r\n  },\r\n  {\r\n    label: \"30-day\",\r\n    id: \"thirty\",\r\n    period: 30,\r\n  },\r\n  {\r\n    label: \"60-day\",\r\n    id: \"sixty\",\r\n    period: 60,\r\n  },\r\n  {\r\n    label: \"90-day\",\r\n    id: \"ninety\",\r\n    period: 90,\r\n  },\r\n];\r\n\r\nconst getRarity = (collection, tokenId) => {\r\n  if (collection.toLowerCase() === \"0x770fa15c43b84f61434321f5167814b64790e6fa\")\r\n    return 4;\r\n\r\n  if (tokenId >= 1 && tokenId <= 150) return 3;\r\n  else if (tokenId >= 151 && tokenId <= 450) return 2;\r\n  else if (tokenId >= 451 && tokenId <= 900) return 1;\r\n  else if (tokenId >= 901 && tokenId <= 3000) return 0;\r\n\r\n  return 0;\r\n};\r\n\r\nconst loadWalletNFTs = (dataWallet, timeType) => {\r\n  if (dataWallet === undefined) return [];\r\n\r\n  if (dataWallet.length === 0) return [];\r\n\r\n  const ret = dataWallet.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < LOH_NFTS.length; i++) {\r\n      if (\r\n        LOH_NFTS[i].address.toLowerCase() === item.token_address.toLowerCase()\r\n      ) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = LOH_NFTS[index];\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item.token_id.toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item.token_id.toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    const rarity = getRarity(nftInfo.address, item.token_id.toString());\r\n    const rewards = REWARD_AMOUNTS[rarity][timeType];\r\n    return {\r\n      id: item.token_id.toString(),\r\n      name: item.name,\r\n      address: nftInfo.address,\r\n      image: imageURL,\r\n      rewards: rewards,\r\n      pointAmount: nftInfo.pointAmount,\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nlet walletNFTSelection = [];\r\n\r\nconst LOHBurning = ({ isMobile, setPendingTxns }) => {\r\n  const { active, library, account } = useWeb3React();\r\n  const [currentTimeType, setCurrentTimeType] = useState(0);\r\n  const [selectStatusInWallet, setSelectStatusInWallet] = useState([]);\r\n  const [isApproving, setIsApproving] = useState(false);\r\n  const [isWaitingForApproval, setIsWaitingForApproval] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [selectedCollection, setSelectedCollection] = useState(COLLECTION_OPTIONS[0]);\r\n\r\n  const [openBurnConfirmModal, setOpenBurnConfirmModal] = useState(false);\r\n  const [openBurningModal, setOpenBurningModal] = useState(false);\r\n  const [pointAmount, setPointAmount] = useState(0);\r\n\r\n  const regInputForCollectionId = React.useRef();\r\n\r\n  const { chainId } = useChainId();\r\n  const burningLOHAddress = getContract(chainId, \"BurningLOH\");\r\n\r\n  const nftAddresses = LOH_NFTS.map((item) => item.address);\r\n  //////////Reading Wallet///////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataWallet } = useSWR(\r\n    active &&\r\n    burningLOHAddress && [\r\n      active,\r\n      chainId,\r\n      burningLOHAddress,\r\n      \"getTokensInWallet\",\r\n      nftAddresses,\r\n    ],\r\n    { fetcher: contractFetcher(library, BurningLOH) }\r\n  );\r\n  const filteredDataWallet = dataWallet ? dataWallet.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  let nftsInWallet = loadWalletNFTs(filteredDataWallet, currentTimeType);\r\n\r\n  /////////Approval Status/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: collectionApprovals } = useSWR(\r\n    active &&\r\n    burningLOHAddress && [\r\n      active,\r\n      chainId,\r\n      burningLOHAddress,\r\n      \"getApprovalStatus\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, BurningLOH) }\r\n  );\r\n\r\n  let needApproval = true;\r\n  if (collectionApprovals) {\r\n    const filteredCollectionApprovals = collectionApprovals ? collectionApprovals.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n    needApproval = !filteredCollectionApprovals[0].isApproval;\r\n  }\r\n\r\n  const [disabledBurnBtn, setDisabledBurnBtn] = useState(!needApproval);\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const handleSelectNFTInWallet = (index) => {\r\n    const itemInfo = nftsInWallet[index];\r\n\r\n    const selectedItem = walletNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      walletNFTSelection = walletNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      const currentItem = walletNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    if (walletNFTSelection.length === 0 && !needApproval)\r\n      setDisabledBurnBtn(true);\r\n    else setDisabledBurnBtn(false);\r\n  };\r\n\r\n  const handleSelectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    setDisabledBurnBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    setSelectStatusInWallet(items);\r\n    setDisabledBurnBtn(true);\r\n  };\r\n\r\n  const handleTimeType = (index) => {\r\n    setCurrentTimeType(index);\r\n  };\r\n\r\n  const approveFromNFT = () => {\r\n    if (needApproval) {\r\n      approveNFT({\r\n        setIsApproving,\r\n        library,\r\n        tokenAddress: selectedCollection.address,\r\n        spender: burningLOHAddress,\r\n        chainId: chainId,\r\n        onApproveSubmitted: () => {\r\n          setIsWaitingForApproval(true);\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleBurn = () => {\r\n    if (needApproval) {\r\n      approveFromNFT();\r\n      return;\r\n    }\r\n\r\n    setOpenBurnConfirmModal(true);\r\n  };\r\n\r\n  const onConfirmBtn = () => {\r\n    setIsSubmitting(true);\r\n\r\n    const nftToBurn = walletNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = walletNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      burningLOHAddress,\r\n      BurningLOH,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"burn\", [nftToBurn, tokenId], {\r\n      // sentMsg: \"Burning LOH NFT submitted!\",\r\n      // failMsg: \"Burning LOH NFT failed.\",\r\n      setOpenActModal: setOpenBurningModal,\r\n      setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsBurning(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n        // setIsSubmitting(false);\r\n      });\r\n\r\n    handleUnselectAllInWallet();\r\n  }\r\n\r\n  const getTextBurn = () => {\r\n    // const [error, modal] = getErrorForDeposit();\r\n\r\n    // if (error && !modal) {\r\n    //   return error;\r\n    // }\r\n\r\n    if (needApproval && isWaitingForApproval) {\r\n      return \"Waiting for Approval...\";\r\n    }\r\n    if (isApproving) {\r\n      return \"Approving\";\r\n    }\r\n    if (needApproval) {\r\n      return \"Approve\";\r\n    }\r\n\r\n    if (isSubmitting) {\r\n      return \"Burning...\";\r\n    }\r\n\r\n    return \"Burn\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (needApproval) setIsWaitingForApproval(false);\r\n  }, [needApproval, active]);\r\n\r\n  useEffect(() => {\r\n    handleUnselectAllInWallet();\r\n  }, [selectedCollection]);\r\n\r\n  useEffect(() => {\r\n    setPointAmount(walletNFTSelection.length * selectedCollection.pointAmount);\r\n    console.log(\"eagle\")\r\n  }, [selectStatusInWallet])\r\n\r\n  return (\r\n    <div className={cx(\"loh-burning\")}>\r\n      <SectionTitle classes=\"mb-3\">\r\n        LOH <span>burn</span>\r\n      </SectionTitle>\r\n      <Description classes={cx(\"mb-3\")} >Select your LOH NFTs that you would like to burn</Description>\r\n      <Combobox ref={regInputForCollectionId} options={COLLECTION_OPTIONS} value={selectedCollection} onChange={(selectedOption) => setSelectedCollection(selectedOption)} />\r\n      <Description classes={cx(\"inyourwallet\")}>\r\n        In your wallet:\r\n      </Description>\r\n\r\n      <div className=\"loh-burning-select\">\r\n        <p>\r\n          <span>{walletNFTSelection ? walletNFTSelection.length : 0}</span> NFTS SELECTED\r\n        </p>\r\n        <p>\r\n          <span>{walletNFTSelection ? walletNFTSelection.length * selectedCollection.pointAmount : 0}</span> LOH POINTS REDEEMABLE\r\n        </p>\r\n      </div>\r\n      <div className={cx(\"loh-burning-tabs\")}>\r\n        {/* <TabList>\r\n          <Tab>\r\n            <p>\r\n              <span>{nftsInWallet ? nftsInWallet.length : 0}</span> in wallet\r\n            </p>\r\n          </Tab>\r\n          <Tab>\r\n            <p>\r\n              <span>{nftsBurned ? nftsBurned.length : 0}</span> burned\r\n            </p>\r\n          </Tab>\r\n        </TabList> */}\r\n\r\n        {isMobile ? (\r\n          <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n            {nftsInWallet && nftsInWallet.length ? (\r\n              nftsInWallet.map((item, index) => {\r\n                return (\r\n                  <LOHBurningCard\r\n                    nft={item}\r\n                    key={index}\r\n                    timeTypeInfo={timeTypeInfo}\r\n                    currentTimeType={currentTimeType}\r\n                    index={index}\r\n                    selectStatusInWallet={selectStatusInWallet}\r\n                    handleSelectNFTInWallet={handleSelectNFTInWallet}\r\n                  />\r\n                );\r\n              })\r\n            ) : (\r\n              <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                No NFTs in wallet\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n            <table>\r\n              <thead>\r\n                <tr rowSpan={nftsInWallet ? nftsInWallet.length + 1 : 0}>\r\n                  <th>nft visual</th>\r\n                  <th>nft #</th>\r\n                  <th>selected</th>\r\n                  <th>burning point</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {nftsInWallet && nftsInWallet.length ? (\r\n                  nftsInWallet.map((item, index) => {\r\n                    return (\r\n                      <tr key={item.id}>\r\n                        <td className=\"nft-visual\">\r\n                          <img src={item.image} alt={`${item.image}`} />\r\n                        </td>\r\n                        <td className=\"w-20\">\r\n                          {item.name} #{item.id}\r\n                        </td>\r\n                        <td>\r\n                          <div className=\"loh-checkbox\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              id={`lohCheckbox-${index}`}\r\n                              checked={selectStatusInWallet[index] === true}\r\n                              onChange={() => handleSelectNFTInWallet(index)}\r\n                              value={selectStatusInWallet[index]}\r\n                            />\r\n                            <label htmlFor={`lohCheckbox-${index}`}></label>\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"days\">\r\n                          <span className=\"text-primary\">\r\n                            {item.pointAmount}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <tr>\r\n                    <td\r\n                      colSpan={6}\r\n                      className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                    >\r\n                      No NFTs in wallet\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n        <div className=\"btn-group\">\r\n          <button\r\n            className={cx(\"select-all-btn\")}\r\n            onClick={handleSelectAllInWallet}\r\n          >\r\n            select all\r\n          </button>\r\n          <RoundButton\r\n            key=\"burn\"\r\n            text={getTextBurn()}\r\n            variant=\"primary\"\r\n            disabled={disabledBurnBtn}\r\n            onBtnClick={handleBurn}\r\n          />\r\n        </div>\r\n      </div>\r\n      <BurnConfirmModal\r\n        openModal={openBurnConfirmModal}\r\n        setOpenModal={setOpenBurnConfirmModal}\r\n        pointAmount={pointAmount}\r\n        onCloseModal={() => setOpenBurnConfirmModal(false)}\r\n        onConfirmBtn={onConfirmBtn}\r\n        isMobile={isMobile}\r\n      />\r\n      <BurningLOHModal\r\n        openModal={openBurningModal}\r\n        setOpenModal={setOpenBurningModal}\r\n        onCloseModal={() => setOpenBurningModal(false)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LOHBurning;\r\n","import { ethers } from \"ethers\";\r\nimport Token from \"abis/LOH.json\";\r\nimport { getExplorerUrl } from \"config/chains\";\r\nimport { helperToast } from \"lib/helperToast\";\r\nimport { Web3ReactContextInterface } from \"@web3-react/core/dist/types\";\r\nimport ExternalLink from \"components/ExternalLink/ExternalLink\";\r\n\r\ntype Params = {\r\n  setIsApproving: (val: boolean) => void;\r\n  library: Web3ReactContextInterface[\"library\"];\r\n  tokenAddress: string;\r\n  spender: string;\r\n  chainId: number;\r\n  onApproveSubmitted: () => void;\r\n  pendingTxns: any[];\r\n  setPendingTxns: (txns: any[]) => void;\r\n  includeMessage?: boolean;\r\n};\r\n\r\nexport function approveNFT({\r\n  setIsApproving,\r\n  library,\r\n  tokenAddress,\r\n  spender,\r\n  chainId,\r\n  onApproveSubmitted,\r\n  pendingTxns,\r\n  setPendingTxns,\r\n  includeMessage,\r\n}: Params) {\r\n  setIsApproving(true);\r\n  const contract = new ethers.Contract(tokenAddress, Token, library.getSigner());\r\n  contract\r\n    .setApprovalForAll(spender, true)\r\n    .then(async (res) => {\r\n      const txUrl = getExplorerUrl(chainId) + \"tx/\" + res.hash;\r\n      helperToast.success(\r\n        <div>\r\n          Approval submitted! <ExternalLink href={txUrl}>View status.</ExternalLink>\r\n          <br />\r\n        </div>\r\n      );\r\n      if (onApproveSubmitted) {\r\n        onApproveSubmitted();\r\n      }\r\n      if (pendingTxns && setPendingTxns) {\r\n        const pendingTxn = {\r\n          hash: res.hash,\r\n          message: includeMessage ? `LOH NFT Approved!` : false,\r\n        };\r\n        setPendingTxns([...pendingTxns, pendingTxn]);\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n      let failMsg;\r\n      if (\r\n        [\"not enough funds for gas\", \"failed to execute call with revert code InsufficientGasFunds\"].includes(\r\n          e.data?.message\r\n        )\r\n      ) {\r\n        failMsg = (\r\n          <div>\r\n            There is not enough CRO in your account on Cronos to send this transaction.\r\n            <br />\r\n            <br />\r\n            <ExternalLink href=\"https://www.mexc.com/\">Bridge CRO to Cronos</ExternalLink>\r\n          </div>\r\n        );\r\n      } else if (e.message?.includes(\"User denied transaction signature\")) {\r\n        failMsg = `Approval was cancelled`;\r\n      } else {\r\n        failMsg = `Approval failed`;\r\n      }\r\n      helperToast.error(failMsg);\r\n    })\r\n    .finally(() => {\r\n      setIsApproving(false);\r\n    });\r\n}\r\n","import cx from \"classnames\";\r\n\r\nconst BurningContainer = ({ children }) => {\r\n  return <div className={cx(\"burning-container\")}>{children}</div>;\r\n};\r\n\r\nexport default BurningContainer;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\nimport useSWR from \"swr\";\r\nimport { useState } from \"react\"\r\nimport Layout from \"components/Layout\";\r\nimport Hero from \"components/Burn/Hero\";\r\nimport LOHBurning from \"components/Burn/LOHBurning\";\r\nimport BurningContainer from \"components/Burn/BurningContainer\";\r\nimport { useMediaQuery } from \"@uidotdev/usehooks\";\r\nimport { getContract } from \"config/contracts\";\r\nimport { useChainId } from \"lib/chains\";\r\nimport { contractFetcher } from \"lib/contracts\";\r\nimport BurningLOH from \"abis/BurningLOH.json\";\r\n\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Burn = (props) => {\r\n  const { connectWallet, setPendingTxns } = props;\r\n\r\n  const { active, library, account } = useWeb3React();\r\n  const isMobile = useMediaQuery(\"only screen and (max-width: 640px)\");\r\n\r\n  const { chainId } = useChainId();\r\n  const burningLOHAddress = getContract(chainId, \"BurningLOH\");\r\n\r\n  const { data: startTimeData } = useSWR(\r\n    true &&\r\n    burningLOHAddress && [\r\n      true,\r\n      chainId,\r\n      burningLOHAddress,\r\n      \"startTime\",\r\n    ],\r\n    { fetcher: contractFetcher(library, BurningLOH) }\r\n  );\r\n\r\n  const startTime = startTimeData ? parseInt(startTimeData.toString()) : 0;\r\n\r\n  const { data: endTimeData } = useSWR(\r\n    true &&\r\n    burningLOHAddress && [\r\n      true,\r\n      chainId,\r\n      burningLOHAddress,\r\n      \"getEndTime\",\r\n    ],\r\n    { fetcher: contractFetcher(library, BurningLOH) }\r\n  );\r\n\r\n  const endTime = endTimeData ? parseInt(endTimeData.toString()) : 0;\r\n  const currentTime = new Date().getTime() / 1000;\r\n\r\n  let burningStatus = 1;\r\n  if (currentTime < startTime) // Not started\r\n    burningStatus = 0;\r\n  else if (currentTime >= startTime && currentTime <= endTime) // Burning\r\n    burningStatus = 1;\r\n  else if (currentTime > endTime) // Ended\r\n    burningStatus = 2;\r\n\r\n  return (\r\n    <Layout>\r\n      <BurningContainer>\r\n        {(!active || burningStatus !== 1) ? (\r\n          <>\r\n            <Hero connectWallet={connectWallet} burningStatus={burningStatus} endTime={endTime} />\r\n          </>\r\n        ) : (\r\n          <LOHBurning isMobile={isMobile} setPendingTxns={setPendingTxns} />\r\n        )}\r\n      </BurningContainer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Burn;\r\n"],"names":["_jsxs","className","cx","onClick","window","scrollTo","top","behavior","children","_jsx","IoMdArrowUp","src","NineTailsLogoImg","alt","Link","to","BackToTopBtn","_ref","_Fragment","HorizontalDivider","Footer","classes","props","connectWallet","burningStatus","endTime","days","hours","minutes","currentTime","Date","getTime","timeToEnd","Math","floor","Male","width","PageTitle","Description","RoundButton","variant","text","onBtnClick","Female","nft","timeTypeInfo","currentTimeType","index","selectStatusInWallet","handleSelectNFTInWallet","image","concat","name","id","period","rewards","type","checked","onChange","value","htmlFor","customStyles","container","provided","_objectSpread","boxShadow","fontFamily","borderRadius","control","backgroundColor","padding","border","option","state","isFocused","singleValue","color","noOptionsMessage","menu","input","options","Select","styles","open","onCloseModal","setOpen","onOpenModal","Modal","onClose","center","classNames","modal","XImage","openModal","setOpenModal","pointAmount","onConfirmBtn","isMobile","LOHModal","AvatarKYORotate","DangerKeepOutImage","label","walletNFTSelection","setPendingTxns","_useWeb3React","useWeb3React","active","library","account","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setSelectStatusInWallet","_useState5","_useState6","isApproving","setIsApproving","_useState7","_useState8","isWaitingForApproval","setIsWaitingForApproval","_useState9","_useState10","isSubmitting","setIsSubmitting","_useState11","COLLECTION_OPTIONS","_useState12","selectedCollection","setSelectedCollection","_useState13","_useState14","openBurnConfirmModal","setOpenBurnConfirmModal","_useState15","_useState16","openBurningModal","setOpenBurningModal","_useState17","_useState18","setPointAmount","regInputForCollectionId","React","chainId","useChainId","burningLOHAddress","getContract","nftAddresses","LOH_NFTS","map","item","address","dataWallet","useSWR","fetcher","contractFetcher","BurningLOH","data","nftsInWallet","timeType","undefined","length","i","toLowerCase","token_address","nftInfo","imageURL","imageHash","VOLUME1_METADATA","Number","token_id","toString","imageType","collection","tokenId","rarity","REWARD_AMOUNTS","filter","loadWalletNFTs","collectionApprovals","needApproval","filteredCollectionApprovals","isApproval","_useState19","_useState20","disabledBurnBtn","setDisabledBurnBtn","itemInfo","selectedItem","find","push","items","_loop","handleUnselectAllInWallet","approveFromNFT","tokenAddress","spender","onApproveSubmitted","pendingTxns","includeMessage","ethers","Token","getSigner","setApprovalForAll","then","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","txUrl","pendingTxn","wrap","_context","prev","next","getExplorerUrl","hash","helperToast","success","ExternalLink","href","message","_toConsumableArray","stop","_x","apply","arguments","catch","e","_e$data","_e$message","failMsg","console","error","includes","finally","approveNFT","useEffect","log","SectionTitle","Combobox","ref","selectedOption","LOHBurningCard","rowSpan","colSpan","disabled","BurnConfirmModal","nftToBurn","contract","callContract","setOpenActModal","BurningLOHModal","useMediaQuery","startTimeData","startTime","parseInt","endTimeData","Layout","BurningContainer","LOHBurning","Hero"],"sourceRoot":""}